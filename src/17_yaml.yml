name: bk-over-ssh
version: "0.1.0"
about: backup files over ssh.  Please try run print-conf and print-env subcommand first.
author: hmkj <hmkj@gmail.com>

# AppSettings can be defined as a list and are **not** ascii case sensitive
settings:
    - ArgRequiredElseHelp

# All Args must be defined in the 'args:' list where the name of the arg, is the
# key to a Hash object
args:
    # The name of this argument, is 'opt' which will be used to access the value
    # later in your Rust code
    # - opt:
    #     help: example option argument from yaml
    #     short: o
    #     long: option
    #     multiple: true
    #     takes_value: true # is this parameter has corepsonding values?
    # - pos:
    #     help: example positional argument from yaml
    #     index: 1
    #     # A list of possible values can be defined as a list
    #     possible_values:
    #         - generate-bash-completions
    #         - generate-zsh-completions
    - app-role:
        help: The app role if cann't infer from the command line parameters.
        long: app-role
        required: false
        takes_value: true
        possible_values:
            - pull_hub
            - active_leaf
            - receive_hub
            - passive_leaf
    - app-instance-id:
        help: The app role if cann't infer from the command line parameters.
        long: app-instance-id
        required: false
        takes_value: true
    - conf:
        help: the path of app configuration file, if not present the app will try to guess one.
        long: conf
        takes_value: true
        required: false
    - console-log:
        help: enable console log output.
        long: console-log
        required: false
    - as-service:
        help: put application in long running state.
        long: as-service
        required: false
    - skip-cron:
        help: skip cron schedule, execute right now.
        long: skip-cron
        required: false
    - enable-sha1:
        help: detect file changing on file's sha1.
        long: enable-sha1
        required: false
    - v:
        help: verbose level debug.
        long: v
        required: false
    - vv:
        help: verbose level trace.
        long: vv
        required: false
    - delay:
        help: delay seconds before execute command. for test purpose.
        long: delay
        takes_value: true
        required: false
    - no-db:
        help: don't use db.
        long: no-db
        required: false
    - no-pb:
        help: don't display progress bar.
        long: no-pb
        required: false
    - buf-len:
        help: the buf-len in case needed.
        long: buf-len
        takes_value: true
        required: false

    # - flag:
    #     help: demo flag argument
    #     short: F
    #     multiple: true
    #     global: true
    #     https://docs.rs/clap/2.33.0/clap/struct.Arg.html#method.global
    #     # Conflicts, mutual overrides, and requirements can all be defined as a
    #     # list, where the key is the name of the other argument
    #     conflicts_with:
    #         - opt
    #     # requires:
    #     #     - pos
    # - mode:
    #     long: mode
    #     help: shows an option with specific values
    #     # possible_values can also be defined in this list format
    #     possible_values: [ vi, emacs ]
    #     takes_value: true
    # - mvals:
    #     long: mult-vals
    #     help: demos an option which has two named values
    #     # value names can be described in a list, where the help will be shown
    #     # --mult-vals <one> <two>
    #     value_names:
    #         - one
    #         - two
    # - minvals:
    #     long: min-vals
    #     multiple: true
    #     help: you must supply at least two values to satisfy me
    #     min_values: 2
    # - maxvals:
    #     long: max-vals
    #     multiple: true
    #     help: you can only supply a max of 3 values for me!
    #     max_values: 3

# All subcommands must be listed in the 'subcommand:' object, where the key to
# the list is the name of the subcommand, and all settings for that command are
# are part of a Hash object
subcommands:
    # The name of this subcommand will be 'subcmd' which can be accessed in your
    # Rust code later
    # - subcmd:
    #     about: demos subcommands from yaml
    #     version: "0.1"
    #     author: Kevin K. <kbknapp@gmail.com>
    #     # Subcommand args are exactly like App args
    #     args:
    #         - scopt:
    #             short: B
    #             multiple: true
    #             help: example subcommand option
    #             takes_value: true
    #         - scpos1:
    #             help: example subcommand positional
    #             index: 1
    - print-conf:
        about: print out the current configuration of application.
    - count-local-files:
        about: count the files in the configuration file.
        args:
            - server-yml:
                help: the configuration file.
                long: server-yml
                required: true
                index: 1
    - count-remote-files:
        about: count the files in the configuration file at another side..
        args:
            - server-yml:
                help: the configuration file.
                long: server-yml
                required: true
                index: 1
    - get-file:
        about: cp a file.
        args:
            - file:
                help: the file to manual.
                required: true
                index: 1        
    - mkdir:
        about: create a new directory.
        args:
            - dir:
                help: the dir to create.
                required: true
                index: 1
    - print-env:
        about: print out environment variables.
    - polling-file:
        about: polling the file properties.
        args:
            - file:
                help: the file name to polling.
                required: true
                index: 1
            - period:
                help: the interval of seconds between polling.
                required: false
                index: 2
    - create-db:
        about: create database.
        args:
            - server-yml:
                help: the configuration file.
                long: server-yml
                required: false
                index: 1
            - db-type:
                help: what kind of database to create.
                long: db-type
                possible_values: [ sqlite ]
                takes_value: true
            - force:
                help: remove and create remote database if exists.
                long: force
                required: false
    - create-remote-db:
        about: create remote database.
        args:
            - server-yml:
                help: the configuration file.
                long: server-yml
                required: false
                index: 1
            - db-type:
                help: what kind of database to create.
                long: db-type
                possible_values: [ sqlite ]
                takes_value: true
            - force:
                help: remove and create remote database if exists.
                long: force
                required: false
    - copy-executable:
        about: copy a executable file to server, the directory to put is described in the server yml file.
        args:
            - server-yml:
                help: the configuration file.
                long: server-yml
                required: true
                index: 1
            - executable:
                help: the executable file to copy.
                required: true
                takes_value: true
    - copy-server-yml:
        about: copy a server-yml file to server, the directory to put is described in the server yml file.
        args:
            - server-yml:
                required: true
                index: 1
    - print-report:
        about: print out last execution report.
        args:
            - server-yml:
                required: true
                index: 1
    - verify-server-yml:
        about: verify if remote executable exists and remote server yml configuration file exists.
        args:
            - server-yml:
                required: true
                index: 1
    - list-server-yml:
        about: list server yml in the configurated data dir.
    - demo-server-yml:
        about: print out a demonstrate server-yml as a start point for you editing. you can redirect output to file.
        args:
            - out:
                long: out
                required: false
                takes_value: true
    - archive-local:
        about: archive directories in the configuration file.
        args:
            - server-yml:
                required: false
                index: 1
            - prune:
                help: archive directories and prune backups.
                long: prune
                required: false
            - prune-only:
                help: don't archive directories, but only prune backups.
                long: prune-only
                required: false
                conflicts_with:
                    - prune
    - send-test-mail:
        about: send a test mail to verify mail configuration.
        args:
            - to:
                required: true
                index: 1
    - list-remote-files:
        args:
            - server-yml:
                required: true
                index: 1
            - out:
                long: out
                required: false
                takes_value: true
    - list-local-files:
        args:
            - server-yml:
                required: false
                index: 1
            - out:
                long: out
                required: false
                takes_value: true
    - sync-pull-dirs:
        about: sync directories in the configuration file.
        args:
            - server-yml:
                required: false
                index: 1
            - rsync-window:
                long: rsync-window
                takes_value: true
                required: false
    - client-loop:
        about: client side loop.
        args:
            - server-yml:
                required: false
                index: 1
            - rsync-window:
                long: rsync-window
                takes_value: true
                required: false
    - sync-push-dirs:
        about: sync directories in the configuration file. The configuration file is at fixed location.
        args:
            - server-yml:
                required: false
                index: 1
            - rsync-window:
                long: rsync-window
                takes_value: true
                required: false
            - force:
                help: upload all file to the target server.
                long: force
                required: false
    - pull-and-archive:
        about: run all tasks.
        args:
            - server-yml:
                required: false
                index: 1
    - confirm-remote-sync:
        about: confirm the last sync-pull-dirs action, execute confirm-local-sync on remote server.
        args:
            - server-yml:
                required: false
                index: 1
    - confirm-local-sync:
        about: confirm the last sync-pull-dirs action.
        args:
            - server-yml:
                required: false
                index: 1
    - rsync:
        about: sync relative functions.
        subcommands:
            - signature:
                args:
                    - file:
                        long: file
                        required: true
                        takes_value: true
                    - block-size:
                        long: block-size
                        required: false
                        takes_value: true
                    - out:
                        long: out
                        required: false
                        takes_value: true
                    - rsync-window:
                        long: rsync-window
                        takes_value: true
                        required: false
            - delta-a-file:
                args:
                    - new-file:
                        long: new-file
                        required: true
                        takes_value: true
                    - sig-file:
                        long: sig-file
                        required: false
                        takes_value: true
                    - out-file:
                        long: out-file
                        required: false
                        takes_value: true
                    - print-progress:
                        long: print-progress
                        required: false
            - restore-a-file:
                args:
                    - old-file:
                        long: old-file
                        required: true
                        takes_value: true
                    - delta-file:
                        long: delta-file
                        required: false
                        takes_value: true
                    - out-file:
                        long: out-file
                        required: false
                        takes_value: true
    - completions:
        about: for example, bk-over-ssh completions bash > ~/.local/share/bash-completion/completions/bk-over-ssh
        version: "0.1"
        author: Kevin K. <kbknapp@gmail.com>
        # Subcommand args are exactly like App args
        args:
            - shell_name:
                help: The shell to generate the script for. 
                index: 1
                required: true
                possible_values:
                    - bash
                    - fish
                    - zsh
                    - powershell
                    - elvish


# ArgGroups are supported as well, and must be sepcified in the 'groups:'
# object of this file
# groups:
#     # the name of the ArgGoup is specified here
#     - min-max-vals:
#         # All args and groups that are a part of this group are set here
#         args:
#             - minvals
#             - maxvals
#         # setting conflicts is done the same manner as setting 'args:'
#         #
#         # to make this group required, you could set 'required: true' but for
#         # this example we won't do that.